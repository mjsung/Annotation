package com.sist;

import java.lang.annotation.ElementType;
/**
 * Created by aaa on 2016-02-29.
 *
 * annotation-
 * 의미 : java class 파일에 meta 정보를 기술하여 meta 정보를 프로그래밍에 활용하는 방식.
 * 용도 : 컴파일러에 코드 작성
 *          소프트웨어 개발 들이 빌드, 배치 시 코드를 자동 생성하게 정보 제공.
 *          실행시 특정 기능 실행하도록 정보 제공.
 *
 * 클래스나 메소드 등의 선언 시에 @ 를 사용하는 것을 말한다.
 참고로 클래스, 메소드, 변수 등 모든 요소에 선언할 수 있다.
 메타 데이터(Metadata) 라고도 불리며, JDK 5 부터 등장했다고 한다.
 *
 * 언제사용할까?
 * - 컴파일러에게 정보를 알려주거나
 * - 컴파일 할 때와 설치 시의 작업을 지정하거나
 * - 실행할 때 별도의 처리가 필요할 때
 *
 * (1) @Override
 - 해당 메소드가 부모 클래스에 있는 메소드를 오버라이드 했다는 것을 명시적으로 선언한다.
 자식 클래스에 메소드가 여러 개 있을 때 어떤 메소드가 오버라이드 된 것인지
 쉽게 알 수 있고, 깜빡하고 빼먹은 매개변수가 있는지 컴파일러에게 알려달라고 생각하면 된다.
 이클립스 같이 편리한 개발툴을 사용하다 보면 자주 볼수 있는 키워드다.

 (2) @Deprecated
 - 더 이상 사용되지 않은 클래스나 메소드 앞에 추가해준다.
 '그냥 지워버리면 되는 거 아닌가?' 라고 생각할 수 있지만 여러 사람이 개발하는 프로젝트에서
 갑자기 있던 걸 훅 지워버리면... 욕 엄청 먹을 수 있다ㅋ 이런 알림을 통해 서서히 지우자.
 나의 경우 안드로이드 개발할 때 API 문서에서 이 키워드를 몇 번 본 적이 있다.

 (3) @SuppressWarnings
 - 프로그램에는 문제가 없는데 간혹 컴파일러가 경고를 뿜을 때가 있다.
 내 성격상 경고 뿜어대는 게 은근 신경쓰이고 거슬릴 때가 있다.
 그럴 때는 이 Annotation을 추가해서 컴파일러에게
 '나도 알고 있고 일부러 그런 거다 그러니 좀 닥치고 있어'
 라고 말해주는 거라고 생각하면 된다. 하지만 너무 남용하진 말자.

 - 참고로 다른 Annotation 과 다르게 속성값을 지정해 줄 수도 있다.

 *
 *         annotation 타겟 종료
 *         java.lng.annotation.ElemantType 열거 상수로 정의
 *         type : class,interface,enum에서 사용가능
 *         field : field에 사용가능
 *         method : method에 사용가능
 *
 *         *annotation 정의 및 사용
 *         -기본 엘리먼트 value
 *         -사용
 *            - 어노테이션 적용할 때 엘리먼트 이름 생략 가능
 *            - 두개 이상의 속성을 기술할 때는 value=값 사용 가능
 *
 *         *annotation 유지 정책
 *         - 어노테이션 적용 코드가 유지되는 시점을 지정하는 것
 *         - java.lang.annotation.RetentionPolicy 열거상수로 정의
 *            -SOURCE
 *              - 소스상에서만 어노테이션 정보를 유지함
 *              - 소스 코드 분석할 때만 의미가 있음
 *              - 바이트 코드 파일에는 정보가 남아 있지 않음
 *            - CLASS
 *              - 바이트 코드 파일까지 어노테이션 정보 유지함
 *              - 하지만 리플렉션을 이용해서 어노테이션 정보를 얻을 수 없다
 *            - RUNTIME
 *              - 바이트 코드 파일까지 어노테이션 정보 유지함.
 *              - 리플렉션을 이용해서 런타임에 어노테이션 정보를 얻을 수 있음.
 *
 *
 */
public @interface PrintAnnotation {
    String calue() default "-";
    int number() default 15;
}


















































